|*** 
	core.mac
	Core Macro
	https://core.exspes.com
	exspes007
	paypal.me/exspes
	
	Plugins Required: MQ2MoveUtils, MQ2Debuffs, MQ2DanNet, MQ2SQLite, MQ2Nav
		
	Files:
	- class.???.inc							One include for each class [WIZ|NEC|MAG|ENC|WAR|PAL|SHD|BST|BER|BRD|RNG|ROG|CLR|DRU|SHM|MNK]
	- common.inc								All common use functions.
	- core.mac									You are looking at it
	- declare.inc								forced event, watched commands, alias, binds
	- events.inc								Contains responses to EQ generated changes (environment/emotes).
	- mode.inc									All Non-Standard Mode controlls
	- custom.inc								custom file. do what you want in it.
	- pregen.inc								environment variables for database generation 
	- data/dbCore.db						core data repository
	- data/pregen.ini						stored spell names/level for new class generation
	- data/core.loot.ini				loot list. Leave, Keep, Destroy, Sell, Announce
	
	Naming Conventions:
	Local/Private Variables: _camelCasing						eg. _loopOutside, _count
	Outer/Global Variables: camelCasing							eg. Nuke1 or healIntervention1
	Running Timers: Timer_Use_For_Timer 						eg. timer_check_ammo
	Timer Times: tUse_ForTimer 											eg. tCheck_Ammo
	Functions: name_name_name() 										eg. check_ammo()
	Functions [class specific]: name_SHORTNAME()  	eg. disc_WAR()
	DEFINE: ALLUPPERCASE 														eg. #define AMIDEAD
		
	Common Used Variables:
	coreAuto						bool			automatic or manual Mode
	Target2Kill					int				the ID of the mob that should be the focus of your wanton destruction
	isValidTarget				bool			is ths a valid Target
	timer_???						string		Prefix for running timers. [Timers] in the Toon INI(s) will hold most base set times.
	setMobAgro					int				range that you will engage a mob at
	_count, _x, _b, _i	int				local loop counts
	_tmpID							int				the passed/local target ID
	tmpHealOverride			int				control hp heal reduction percentage. For zones that impose a HP/Mana cap. (no effect on stamina calculations)
	
	Tab spaces set to 2 if you care.

***|

| #warning
| #turbo 120
#define DEBUG "/varset currentdebugsub"
#define SDEBUG "/echo \ar[\ax\aw${Time.Second}\ax : \aw${Macro.CurLine}\ax\ar]\ax(\a-t${Macro.RunTime}\ax)"
#define OUT "/echo \at-\ax"
#define VOUT "/if (${swEchosVerbose}) /echo \at-\ax"
#define VMELEE "/if (${swEchosMelee}) /echo \at-\ax"
#define VSPELL "/if (${swEchosSpell}) /echo \at-\ax"
#define VITEM "/if (${swEchosItem}) /echo \at-\ax"
#define VDISC "/if (${swEchosDisc}) /echo \at-\ax"
#define VALT "/if (${swEchosAlt}) /echo \at-\ax"
#define VPULSE "/if (${swEchosPulse}) /echo \at-\ax"
#define VBC "/if (${swEchosBC}) /call echos bc"
#define VSQL "/if (${swEchosSQL}) /echo \at-\ax"
#define ECHOCHANNEL "/if (${Bool[${echoChannel}]}) /${echoChannel} "
#define HUDPATH "/noparse /ini .\..\MQ2HUD.ini"
#define AMIDEAD "/if (${watch_for_death[]}) /call watch_for_rezbox"
#define SIMPLEEXIT "/if (${Me.Moving} || ${Me.Invis} || ${Select[${Me.State},DEAD,FEIGN,STUN]} || ${swAmIDead} || ${swNeedRez} || ${Me.Zoning}) /return"
#define CHECKEXIT "/if (${check_exit[]}) /return"
#define CHECKTIE "/if ((${swSetTie} && !${Bool[${timer_check_Tie}]}) || (${swSetTie} && ${swTieLock})) /call set_tie"
#define CHECKREZ "/if (${coreAuto} && !${swPull} && !${Me.Invis} && ${swRezGive}) /call check_for_corpse"
#define CHECKSAFELIST "/if (!${validate_lstSafeNames[${_sender}]}) /return FALSE"
#define UPDATEHUD "/call update_HUD_notices"
#define CLEARCURSOR "/if ((${swAutoCursor} && ${Cursor.ID} && !${timer_auto_cursor_pause}) || ${Bool[${autoInventoryItem.Find[${Cursor.Name}]}]}) /call sort_cursor"
#define TESTFUNCTION "/call test_function"
#define CHECKCOMBATCAST "/if (${coreAuto} && !${swBuffCombat} && ${SpawnCount[npc radius ${setCombatRadius} playerstate 4 targetable]}) /return TRUE"
#define CHECKINPUTS "/call check_inputs"
#define CHECKFADE "/if (${switchAAFade} && ${Me.PctHPs} <= ${useAAFadePct} && !${Me.Dead}) /call cast_AA_fade"

#include tc\declare.inc
#include tc\pregen.inc
#include tc\common.inc
#include tc\mode.inc
#include tc\events.inc
#include tc\class.ber.inc
#include tc\class.brd.inc
#include tc\class.bst.inc
#include tc\class.clr.inc
#include tc\class.dru.inc
#include tc\class.enc.inc
| #include tc\class.enc.test.inc
#include tc\class.mag.inc
#include tc\class.mnk.inc
#include tc\class.nec.inc
#include tc\class.pal.inc
#include tc\class.rng.inc
#include tc\class.rog.inc
#include tc\class.shd.inc
#include tc\class.shm.inc
#include tc\class.war.inc
#include tc\class.wiz.inc
#include tc\custom.inc



|***
 *	DES: Main .. duhh..
 *	USE: 
 *	NOTE: 
 ***|
sub main(string _custom, string _startparam)
	| Current Build
	/call setDeclare currentBuild 			string outer 0601.01
	
	| set the default character ID
	/call setDeclare chrID 							string outer ${MacroQuest.Server}_${Me.Class.ShortName}_${Me.DisplayName}

	| force SQL echos on for the start
	/call setDeclare swEchosSQL 				bool outer TRUE

	| dont fuck with this. i'm serious...
	/call setDeclare swForceUpdate			bool outer FALSE
	
	| shopping time
	/call initialize_core ${_custom}
		
	| noauto on start
	/if (${_startparam.Equal[noauto]}) /call set_switch ${chrID} coreAuto FALSE
	
	/if (${swLog}) /mqlog ${currentBuild} .. Clean Start
	
	| maintenance mode loop lock
	/while (${swMaintenance}) {
		/if (${Me.Zoning}) /call Event_Zone
		
	  CHECKINPUTS
	  UPDATEHUD FALSE
		/if (!${timer_validate_zone}) /call validate_zone FALSE FALSE
		/delay 1

		/if (${swManualAADiscNow}) {
			/if (${Bool[${AANow1}]} || ${Bool[${AANow2}]}) /call check_AA_now
			/if (${Bool[${DiscNow1}]} || ${Bool[${DiscNow2}]}) /call check_disc_now
			/if (${Bool[${ItemNow1}]} || ${Bool[${ItemNow2}]}) /call check_item_now
		}
	}
	
	
	| normal Core operations loop
	/while (!${swMaintenance}) {
		DEBUG Main Loop: non maintenance start
		/if (${Me.Zoning}) /call Event_Zone
	  CHECKINPUTS
	  UPDATEHUD FALSE
	    	
		| make sure we're in the right zone
		/if (!${timer_validate_zone}) /call validate_zone FALSE FALSE
	
		| sort /heal override ##
		/if (${tmpHealOverride} != ${setHealOverride}) /varset tmpHealOverride ${If[${setHealOverride},${Float[${setHealOverride}].Centi},99.99]}
		
		/if (${coreAuto} || ${swManualAADiscNow}) {
			/if (${Bool[${AANow1}]} || ${Bool[${AANow2}]}) /call check_AA_now
			/if (${Bool[${DiscNow1}]} || ${Bool[${DiscNow2}]}) /call check_disc_now
			/if (${Bool[${ItemNow1}]} || ${Bool[${ItemNow2}]}) /call check_item_now
		}

		| non class specific automated thingies.
		/if (${coreAuto}) {
			/if (${swHomeSet}) /squelch /makecamp mpause
			
			| keep an eye out for real rezes
			/if (${swNeedRez}) {
				/if (${Window[ConfirmationDialogBox].Open}) /varset markerDead TRUE
			}
			
			| check to see if someone needs a doctor?
			/if (${swHealCure}) {
				/call cast_cure
			}
			
			| smoke 'em if 'yah got 'em
			/if (${setRestPct}) {
				/if (!${swPull} || (${swPull} && !${SpawnCount[npc radius ${setMobAgro} playerstate 4]})) /call do_rest
			}			
			
			| buff all the things
			/call check_buff_routines

			| fix exp
			/if (${swCorrectEXPAA}) {
				/if (!${timer_check_EXP} && (!${SafeZone} || ${swOverrideSafeZone})) /call auto_adjust_EXP
			}

			| fix ur pet!
			/if (!${timer_Check_Familiar}) /call sort_familiar
			
			| sort out return to camp
			/if (${swHomeSet}) {
				/if (!${SpawnCount[npc radius ${setCombatRadius} playerstate 4 targetable]} && ((${Me.Y} != ${MakeCamp.AnchorY}) && (${Me.X} != ${MakeCamp.AnchorX})) && (!${SafeZone} || ${swOverrideSafeZone})) /makecamp return
			}
			
			| update blocked buffs
			/if (!${timer_check_buffs_blocked}) /call check_buffs_blocked FALSE FALSE
			
		}
	
		| meal
		/if ((${coreAuto} || ${swMealinManual}) && !${timer_meal}) /call last_supper
		
		/if (${Me.PctEndurance} < 32) {
			/if (${validate_class[FALSE, ${lstClassMelee}]}) /call cast_stamina_recovery
		}

		| use those AA.. hoarding bastard
		/if (${swAAFireworks}) {
			/if (!${timer_Waste_Fireworks}) /call cast_AA_fireworks
		}
		
		| watch for spawn
		/if (${Bool[${watchSpawn}]}) {
			/if (!${timer_check_watch_spawn}) /call check_watch_spawn
		}

		| guns need ammo
		/if (${swCombatRange}) /call check_ammo
		
		CHECKTIE

		| looter stuffs
		/if (${swADVLoot}) {
			/if ((${coreAuto} || ${swOverrideLoot}) && (!${SafeZone} || ${swOverrideSafeZone})) /call do_loot
		}

		| non normal modes of operation
		/call do_mode
	
		| use the one off clickies in the Toons INI
		/if (!${timer_check_odds_and_ends}) /call odds_and_ends

		| do we pull or assist	
		/if (${coreAuto} && (!${SafeZone} || ${swOverrideSafeZone})) {
			/if (!${Me.Invis} || (${coreAuto} && ${Select[${Me.Class.ShortName},ROG]} && ${swSoS})) {	
				/if ((!${swPull} && !${swAdvPull}) || ${swOffTank}) {
					/call get_assist_target	
				} else /if (${swPull} && !${Target2Kill} && !${swOffTank}) {
					/call get_target FALSE
				} else /if (${swAdvPull} && !${Target2Kill}) {
					/call get_target_advanced FALSE
				}
			}
		}

		| check all the basics before we hit the class
		AMIDEAD
		CHECKINPUTS
		CHECKREZ
		CHECKTIE
		CLEARCURSOR

		| time to take this bitch to church!
		/call core_${Me.Class.ShortName}

	}
	
	| this is MQ2 reserved for end of macro
	:OnExit	
		/if (!${MacroQuest.LastCommand.Find[/end]} && !${MacroQuest.LastCommand.Find[/camp]}) {
			/if (${swLog}) {
				 /mqlog ${currentBuild} .. ERROR SOMEWHERE
				 /mqlog .. LastCMD: ${MacroQuest.LastCommand}
				 /mqlog .. ErrorMsg: ${MacroQuest.Error}
				 /mqlog .. DataError: ${MacroQuest.MQ2DataError}
				 /mqlog .. SyntaxError: ${MacroQuest.SyntaxError}
				 /mqlog .. RunningTime: ${MacroQuest.Running}
			}
		} else {
			VOUT Current Build ${cinfo}${currentBuild}\ax ${sep} ${cbad}Ended\ax
			/if (${swLog}) {
				/mqlog ${currentBuild} .. Clean Exit
			}
		}
		/endmacro	
/return



|***
 *	DES: initialize core
 *	USE: /call initialize_core
 *	NOTE: what did you expect?
 ***| 	
sub initialize_core(string _custom)
	/mqclear
	/if (${Target.ID}) /squelch /target clear
	
	| load common environment use arrays
	/call pregen_data_arrays FALSE
	
	| set loot INI
	/if (!${Defined[INILoot]}) /declare INILoot string outer 
	/varset INILoot tc\data\core.loot.ini
	
	| pregeneration INI
	/if (!${Defined[INIPreGen]}) /declare INIPreGen string outer 
	/varset INIPreGen tc\script\pregen.ini		

	| Gem List outputs
	/if (!${Defined[INIGemControl]}) /declare INIGemControl string outer 
	/varset INIGemControl tc\data\gemcontrol.ini		

	| /info INI
	| /if (!${Defined[INIInfo]}) /declare INIInfo string outer 
	| /varset INIInfo tc\script\info.ini		
	
	| SQLite Core Database
	/if (!${Defined[dbCore]}) /declare dbCore string outer 
	/if (${Bool[${_custom}]}) {
		/varset dbCore macros\tc\data\dbCore.${_custom}.db
	} else {
		/varset dbCore macros\tc\data\dbCore.db
	}
	
	| SQLite Character Database
	/if (!${Defined[chrDBID]}) /declare chrDBID string outer 
		/varset chrDBID macros\tc\data\${MacroQuest.Server}${Me.Class.ShortName}${Me.DisplayName}.db
	}	
	
	| validate pulgins, reload if needed
	/call verify_plugins FALSE	
	
	| validate databas
	/call sql_schema FALSE
	
	| check zone table
	/if (${bldenvironmentcurrent}) {
		VSQL \awDB\ax::\awzone\ax::\a-tCurrent\ax
	} else /if (!${bldenvironmentcurrent}) {
		/call pregen_zone		
	}
	
	| update MyButtons
	| /call mybutton_control
	
	| echo the notice
	/if (!${bldenvironmentcurrent}) {
		/call echo_notice
	}
	
	| load aliases
	/call set_alias
	
	| initialize timers
	/call pregen_timers
	
	| verify current zone is loaded
	/call validate_zone FALSE TRUE
	
	| set base core environment
	/call base_preperation
		
	| call any custom.inc declares
	/call set_declares_custom
	
	| set initial blocked spells timer
	/call check_buffs_blocked FALSE TRUE
		
  | /if (${swOverrideLOS}) VOUT ${ocaution} ${sep} Ignoring Line of Sight\ax
	OUT ${cgood}Ready\ax
/return



|***
 *	DES: Settings I like to use. 
 *	USE: /call base_preperation
 *	NOTE: 
 ***|
sub base_preperation()
	| /varset currentdebugsub base_preperation()

	| set peer communications options
	/squelch /dnet localecho FALSE
	/squelch /dnet commandecho FALSE
	/squelch /dnet frontdelim ON
	/squelch /dnet fullnames FALSE

	| fuck these plugins in particular
	/if (${validate_plugin[FALSE, |MQ2Bucles]}) {
		/plugin MQ2Bucles unload
	}

	| disable smart assists for TLP w/o underfoot
	/if (!${validate_expansion[FALSE, |16]}) {
 		/call set_switch ${chrID} swAssist1 FALSE
 		/call set_switch ${chrID} swAssist2 FALSE
 		/call set_switch ${chrID} swAssist3 FALSE
		/call set_switch ${chrID} swAssistG FALSE
	}
	
	| clear the spawn watch
	/if (${Bool[${watchSpawn}]}) {
		/call sql_update FALSE ${chrID} watchSpawn FALSE
	}
	
	| a little display adjustments. If ur blind, get some glasses.
	| /mqfont ${setMQFontSize}
	
	| clear rampage tank for healers
	/if (${validate_class[FALSE, |CLR|DRU|PAL|SHM]}) {
		/call sql_update FALSE ${chrID} RampageTank FALSE
	}

	| why the fuck did Verant/SOE/DayBreak ever implement these as a default..??	
	/squelch /assist ${swAutoAssist}
	
	| disable the melee plugin and reset combat so you just stand there.
	/if (${swDisableMQ2Melee}) {
		/if (${validate_plugin[FALSE, |mq2melee]}) {
			/melee off
			/squelch /melee reset
		}
	}

	| bard stuffs
	/if (${validate_class[FALSE, |BRD]}) {
		/if (${validate_plugin[FALSE, |mq2twist]}) {
			/squelch /twist clear
			/squelch /twist quiet
		}
	}

	| turn off rez non guildies/group if it is still on. 'cause fuck everyone else.
	/if (${swRezEveryone}) {
		/call set_switch ${chrID} swRezEveryone FALSE 
	}

	| Show the HUD	
	/squelch /hud Normal
	/squelch /loadhud Core
			
	| force sos switch FALSE for non rogues
	/if (!${validate_class[FALSE, |ROG]}) {
		/if (${swSoS}) /call set_switch ${chrID} swSoS FALSE
	}
		
	| check debuffs	switches	
	/call validate_debuff FALSE mezz
	/call validate_debuff FALSE malo
	/call validate_debuff FALSE tash
	/call validate_debuff FALSE cripple
	/call validate_debuff FALSE slow
	/call validate_debuff FALSE eradicate
	/call validate_debuff FALSE snare
	
	| make sure buttons are current
	| /if (!${Macro.IsTLO[MyButtons]}) {
	| 	/squelch /mybuttons reload
	| }	
		
	| check game cash?
	/if (${swEQCash}) /call check_free_ingame_cash		
		
/return




|***
 *	DES: checks to make sure all needed plugins are loaded.
 *	USE: /call verify_plugins [TRUE|FALSE]
 *	NOTE: 
 ***|
sub verify_plugins(bool _debug)
	/declare _count int local 0
	/declare _lstPlugin string local |DanNet|sqlite|Debuff|MoveUtils|Navigation|AdvPath

	/for _count 1 to ${_lstPlugin.Count[|]}
		/if (${_debug}) /echo check: \at${_lstPlugin.Arg[${_count},|]}\ax
		/if (!${Macro.IsTLO[${_lstPlugin.Arg[${_count},|]}]}) {
			/echo PLUGIN: \ar${_lstPlugin.Arg[${_count},|]}\ax is not loaded Ending Core.
			/endm
		}
	/next _count
/return



|***
 *	DES: simple notice for new builds. will display only once per build
 *	USE: /call echo_notice
 *	NOTE:
 ***|
sub echo_notice()
	OUT You are using a \agbeta\ax build of Core.
	OUT If you find issues, please post them to: 
	OUT \awhttps://discord.gg/T2Z7NXG\ax
/return